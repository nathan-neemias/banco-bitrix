#!/usr/bin/env node

const axios = require('axios');

async function testPGFNAPIResponse() {
  try {
    console.log('üîç TESTANDO RESPOSTA DA API PGFN');
    console.log('==========================================');
    
    const CNPJ = '44718903000188';
    const URL = `http://167.235.49.166:3000/api/cnpj/${CNPJ}`;
    
    console.log(`üì° Chamando: ${URL}`);
    console.log('');

    const response = await axios.get(URL);
    const data = response.data;
    
    console.log('üìä ESTRUTURA DA RESPOSTA:');
    console.log('====================');
    console.log('‚úÖ Success:', data.success);
    console.log('üî¢ CNPJ consultado:', data.cnpj_consultado);
    console.log('');
    
    if (data.empresa) {
      console.log('üè¢ EMPRESA DATA:');
      console.log('================');
      console.log('‚úÖ Nome:', data.empresa.nome || 'N/A');
      console.log('üìç Municipio:', data.empresa.municipio || 'N/A');
      console.log('üó∫Ô∏è UF:', data.empresa.uf || 'N/A');
      console.log('üè≠ CNAE:', data.empresa.cnae || 'N/A');
      console.log('üìè Porte:', data.empresa.porte || 'N/A');
      console.log('');
    }
    
    if (data.dados_receita) {
      console.log('üí∞ DADOS RECEITA:');
      console.log('=================');
      console.log('üíµ Total Divida Ativa:', data.dados_receita.total_divida_ativa || 'N/A');
      console.log('‚öñÔ∏è Execu√ß√£o Fiscal Ativa:', data.dados_receita.execucao_fiscal_ativa || 'N/A');
      console.log('üë§ CPF S√≥cio Responde:', data.dados_receita.cpf_socio_responde || 'N/A');
      console.log('‚öîÔ∏è Transa√ß√£o Impugna√ß√£o:', data.dados_receita.transacao_impugnacao || 'N/A');
      console.log('üî¢ Parcelamentos 5 Anos:', data.dados_receita.parcelamentos_5_anos || 'N/A');
      console.log('üîÑ Parcelamentos Ativos:', data.dados_receita.parcelamentos_ativos || 'N/A');
      console.log('üí≥ Total Parcelado:', data.dados_receita.total_parcelado || 'N/A');
      console.log('üí∏ Total Saldo Devedor:', data.dados_receita.total_saldo_devedor || 'N/A');
      console.log('üéÅ Possui Transa√ß√£o Benef√≠cio:', data.dados_receita.possui_transacao_beneficio || 'N/A');
      console.log('');
    }
    
    // Testar a fun√ß√£o de convers√£o simulando
    console.log('üß™ TESTANDO CONVERS√ÉO PARA BITRIX:');
    console.log('===================================');
    
    const bitrixFields = {
      // Campos monet√°rios
      'UF_CRM_1758806120': data.dados_receita.total_divida_ativa?.replace(/[R$\s.]/g, '').replace(',', '.'),
      'UF_CRM_1758806370': data.dados_receita.total_saldo_devedor?.replace(/[R$\s.]/g, '').replace(',', '.'),
      'UF_CRM_1758806357': data.dados_receita.total_parcelado?.replace(/[R$\s.]/g, '').replace(',', '.'),
      
      // Campos booleanos
      'UF_CRM_1758806167': data.dados_receita.execucao_fiscal_ativa === 'SIM' ? '1' : '0',
      'UF_CRM_1758808716': data.dados_receita.cpf_socio_responde === 'SIM' ? '1' : '0',
      'UF_CRM_1758806267': data.dados_receita.transacao_impugnacao === 'SIM' ? '1' : '0',
      'UF_CRM_1758806394': data.dados_receita.possui_transacao_beneficio === 'SIM' ? '1' : '0',
      
      // Campos num√©ricos
      'UF_CRM_1758806322': String(data.dados_receita.parcelamentos_5_anos || 0),
      'UF_CRM_1758806337': String(data.dados_receita.parcelamentos_ativos || 0),
      
      // Nome empresa
      'UF_CRM_1557101315015': data.empresa?.nome || ''
    };
    
    for (const [fieldId, value] of Object.entries(bitrixFields)) {
      const fieldMap = {
        'UF_CRM_1758806120': 'üí∞ Total D√≠vida Ativa',
        'UF_CRM_1758806167': '‚öñÔ∏è Execu√ß√£o Fiscal Ativa',
        'UF_CRM_1758808716': 'üë§ CPF S√≥cio Responde',
        'UF_CRM_1758806267': '‚öîÔ∏è Transa√ß√£o Impugna√ß√£o',
        'UF_CRM_1758806322': 'üî¢ Parcelamentos 5 Anos',
        'UF_CRM_1758806337': 'üîÑ Parcelamentos Ativos',
        'UF_CRM_1758806357': 'üí≥ Total Parcelado',
        'UF_CRM_1758806370': 'üí∏ Total Saldo Devedor',
        'UF_CRM_1758806394': 'üéÅ Posui Transa√ß√£o Benef√≠cio',
        'UF_CRM_1557101315015': 'üè¢ Nome Empresa'
      };
      
      console.log(`${fieldMap[fieldId]} (${fieldId}):`);
      console.log(`   Valor origem: "${data.dados_receita[Object.keys(data.dados_receita).find(k => 
        Object.values(bitrixFields).some(v => v === String(data.dados_receita[k]))
      )] || 'N/A'}"`);
      console.log(`   Valor convertido: "${value}"`);
      console.log(`   Status: ${value ? '‚úÖ Preenchido' : '‚ùå Vazio'}`);
      console.log('');
    }
    
  } catch (error) {
    console.log('');
    console.log('‚ùå ERRO:', error.message);
    if (error.response) {
      console.log('Status:', error.response.status);
      console.log('Data:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

testPGFNAPIResponse();

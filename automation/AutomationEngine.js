const BitrixService = require('./services/BitrixService');
const PGFNService = require('./services/PGFNService');
const Logger = require('./utils/Logger');
const StatsCollector = require('./utils/StatsCollector');
const settings = require('./config/settings');
const { v4: uuidv4 } = require('uuid');

/**
 * Engine principal de automa√ß√£o PGFN
 */
class AutomationEngine {
  constructor() {
    this.bitrixService = new BitrixService();
    this.pgfnService = new PGFNService();
    this.logger = new Logger();
    this.stats = new StatsCollector();
    this.executionId = null;
    this.isRunning = false;
  }
  
  /**
   * Converter dados PGFN para formato correto do Bitrix
   */
  convertToBitrixFormat(pgfnData, empresaData = null) {
    const bitrixFields = {};
    
    // Campos monet√°rios (valores em Reais) - sem formata√ß√£o brasileira
    if (pgfnData.total_divida_ativa) {
      bitrixFields['UF_CRM_1758806120'] = pgfnData.total_divida_ativa
        .replace(/[R$\s.]/g, '')
        .replace(',', '.');
    }
    
    if (pgfnData.total_saldo_devedor) {
      bitrixFields['UF_CRM_1758806370'] = pgfnData.total_saldo_devedor
        .replace(/[R$\s.]/g, '')
        .replace(',', '.');
    }
    
    if (pgfnData.total_parcelado) {
      bitrixFields['UF_CRM_1758806357'] = pgfnData.total_parcelado
        .replace(/[R$\s.]/g, '')
        .replace(',', '.');
    }
    
    // Campos booleanos tipo SIM/N√ÉO no Bitrix
    bitrixFields['UF_CRM_1758806167'] = pgfnData.execucao_fiscal_ativa; // J√° vem como 'SIM' ou 'N√ÉO'
    bitrixFields['UF_CRM_1758808716'] = pgfnData.cpf_socio_responde;   // J√° vem como 'SIM' ou 'N√ÉO'  
    bitrixFields['UF_CRM_1758806267'] = pgfnData.transacao_impugnacao; // J√° vem como 'SIM' ou 'N√ÉO'
    bitrixFields['UF_CRM_1758806394'] = pgfnData.possui_transacao_beneficio; // J√° vem como 'SIM' ou 'N√ÉO'
    
    // Campos num√©ricos simples
    bitrixFields['UF_CRM_1758806322'] = String(pgfnData.parcelamentos_5_anos || 0);
    bitrixFields['UF_CRM_1758806337'] = String(pgfnData.parcelamentos_ativos || 0);
    
    // Campo nome da empresa
    if (empresaData && empresaData.nome) {
      bitrixFields['UF_CRM_1557101315015'] = empresaData.nome;
    }
    
    return bitrixFields;
  }
  
  /**
   * Executar automa√ß√£o completa
   */
  async run() {
    // Se modo cont√≠nuo est√° habilitado, iniciar monitoramento infinito
    if (settings.automation.continuous_mode) {
      return this.startContinuousMonitoring();
    }
    
    // Modo √∫nico (execu√ß√£o uma vez)
    if (this.isRunning) {
      throw new Error('Automa√ß√£o j√° est√° em execu√ß√£o');
    }
    
    this.isRunning = true;
    this.executionId = uuidv4();
    
    try {
      this.logger.automationStart(this.executionId, 0);
      this.stats.startExecution();
      
      // Verificar conex√µes
      await this.checkConnections();
      
      // Buscar neg√≥cios para processar
      const deals = await this.getDealsToProcess();
      this.stats.totalDeals = deals.length;
      
      this.logger.info(`üìã Encontrados ${deals.length} neg√≥cios para processar`);
      
      if (deals.length === 0) {
        this.logger.warn('‚ö†Ô∏è Nenhum neg√≥cio encontrado para processar');
        return this.getFinalStats();
      }
      
      // Processar neg√≥cios em lotes
      await this.processDealsInBatches(deals);
      
      // Finalizar execu√ß√£o
      this.stats.endExecution();
      this.logger.automationComplete(this.executionId, this.stats.getSummary());
      
      return this.getFinalStats();
      
    } catch (error) {
      this.logger.error('üí• Erro cr√≠tico na automa√ß√£o:', error.message);
      throw error;
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Monitoramento cont√≠nuo - roda infinitamente verificando novos neg√≥cios
   */
  async startContinuousMonitoring() {
    if (this.isRunning) {
      throw new Error('Monitoramento cont√≠nuo j√° est√° em execu√ß√£o');
    }
    
    this.isRunning = true;
    this.isContinuousMode = true;
    
    this.logger.info(`üîÑ INICIANDO MONITORAMENTO CONT√çNUO`);
    this.logger.info(`‚è∞ Verificando a cada ${settings.automation.interval_seconds} segundos`);
    this.logger.info(`üïí Desde: ${new Date(settings.automation.get_start_date()).toLocaleString('pt-BR')}`);
    this.logger.info(`üìã Pipeline: ${settings.bitrix.target_pipeline}`);
    this.logger.info(`üéØ Fases: ${settings.bitrix.target_phases.join(', ')}`);
    this.logger.info('');
    
    try {
      // Verificar conex√µes uma vez no in√≠cio
      this.logger.info('üîç Verificando conex√µes...');
      await this.checkConnections();
      this.logger.info('‚úÖ Todas as conex√µes OK');
      
      let cycleCount = 0;
      
      while (this.isRunning && settings.automation.keep_monitoring) {
        cycleCount++;
        const cycleStart = Date.now();
        
        try {
          this.logger.info(`\nüîÑ Ciclo ${cycleCount} - ${new Date().toLocaleString('pt-BR')}`);
          
          // Buscar neg√≥cios novos
          const deals = await this.getDealsToProcess();
          
          if (deals.length > 0) {
            this.logger.info(`üÜï ${deals.length} novos neg√≥cios encontrados - PROCESSANDO`);
            await this.processDealsInBatches(deals);
            this.logger.info(`‚úÖ Ciclo ${cycleCount} conclu√≠do - ${deals.length} neg√≥cios processados`);
          } else {
            this.logger.info(`‚è≥ Ciclo ${cycleCount} conclu√≠do - nenhum neg√≥cio novo`);
          }
          
        } catch (error) {
          this.logger.error(`‚ùå Erro no ciclo ${cycleCount}:`, error.message);
          
          // Se configura√ß√£o permite continuar com erro, aguarda e continua
          if (settings.error_handling.continue_on_error) {
            this.logger.warn('‚ö†Ô∏è Continuando monitoramento apesar do erro...');
          } else {
            throw error;
          }
        }
        
        const cycleTotalTime = Date.now() - cycleStart;
        this.logger.info(`‚è±Ô∏è Ciclo ${cycleCount} - Dura√ß√£o: ${cycleTotalTime}ms`);
        
        // Aguardar pr√≥ximo ciclo
        if (this.isRunning) {
          this.logger.info(`üò¥ Aguardando ${settings.automation.interval_seconds}s para pr√≥ximo ciclo...`);
          await this.sleep(settings.automation.interval_seconds * 1000);
        }
      }
      
    } catch (error) {
      this.logger.error('üí• Erro cr√≠tico no monitoramento cont√≠nuo:', error.message);
      throw error;
    } finally {
      this.isRunning = false;
      this.isContinuousMode = false;
      this.logger.info('üõë MONITORAMENTO CONT√çNUO FINALIZADO');
    }
  }
  
  /**
   * Verificar conex√µes com APIs
   */
  async checkConnections() {
    this.logger.info('üîç Verificando conex√µes...');
    
    // Testar Bitrix
    const bitrixOk = await this.bitrixService.testConnection();
    if (!bitrixOk) {
      throw new Error('N√£o foi poss√≠vel conectar ao Bitrix24');
    }
    this.logger.info('‚úÖ Conex√£o com Bitrix24 OK');
    
    // Testar nossa API PGFN
    const pgfnOk = await this.pgfnService.testConnection();
    if (!pgfnOk) {
      throw new Error('N√£o foi poss√≠vel conectar √† API PGFN');
    }
    this.logger.info('‚úÖ Conex√£o com API PGFN OK');
  }
  
  /**
   * Buscar neg√≥cios para processar
   */
  async getDealsToProcess() {
    this.logger.info('üîé Buscando neg√≥cios na pipeline de destino...');
    
    const allDeals = await this.bitrixService.getDealsToProcess();
    
    // Separar entre novos e j√° processados para mostrar estat√≠sticas
    const newDeals = allDeals.filter(deal => 
      !settings.automation.processed_deals.has(deal.ID.toString())
    );
    const alreadyProcessed = allDeals.filter(deal => 
      settings.automation.processed_deals.has(deal.ID.toString())
    );
    
    // Verificar quais neg√≥cios novos t√™m CNPJ ou n√£o
    const dealsWithCNPJ = newDeals.filter(deal => deal.UF_CRM_1745494235);
    const dealsWithoutCNPJ = newDeals.filter(deal => !deal.UF_CRM_1745494235);
    
    this.logger.info(`üìä Encontrados ${allDeals.length} neg√≥cios dispon√≠veis no dia`);
    this.logger.info(`üÜï ${newDeals.length} neg√≥cios novos para processar`);
    this.logger.info(`‚úÖ ${alreadyProcessed.length} neg√≥cios j√° processados anteriormente`);
    
    if (dealsWithCNPJ.length > 0) {
      this.logger.info(`üìÑ ${dealsWithCNPJ.length} neg√≥cios COM CNPJ: ${dealsWithCNPJ.map(d => `${d.ID}(${d.UF_CRM_1745494235})`).join(', ')}`);
    }
    
    if (dealsWithoutCNPJ.length > 0) {
      this.logger.info(`‚ùå ${dealsWithoutCNPJ.length} neg√≥cios SEM CNPJ: ${dealsWithoutCNPJ.map(d => d.ID).join(', ')}`);
    }
    
    if (newDeals.length > 0) {
      this.logger.info(`üìã IDs dos novos neg√≥cios: ${newDeals.map(d => d.ID).join(', ')}`);
    }
    if (alreadyProcessed.length > 0) {
      this.logger.info(`üìã IDs j√° processados: ${alreadyProcessed.map(d => d.ID).join(', ')}`);
    }
    
    // Processar APENAS neg√≥cios novos (n√£o j√° processados)
    const dealsToProcess = newDeals;
    
    // Limitar quantidade se configurado
    if (dealsToProcess.length > settings.automation.max_deals_per_execution) {
      this.logger.warn(`‚ö†Ô∏è Limitando processamento a ${settings.automation.max_deals_per_execution} neg√≥cios`);
      return dealsToProcess.slice(0, settings.automation.max_deals_per_execution);
    }
    
    return dealsToProcess;
  }
  
  /**
   * Processar neg√≥cios em lotes
   */
  async processDealsInBatches(deals) {
    const batchSize = settings.automation.batch_size;
    const batches = [];
    
    // Dividir em lotes
    for (let i = 0; i < deals.length; i += batchSize) {
      batches.push(deals.slice(i, i + batchSize));
    }
    
    this.logger.info(`üì¶ Processando ${batches.length} lotes de at√© ${batchSize} neg√≥cios`);
    
    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
      const batch = batches[batchIndex];
      
      this.logger.info(`üîÑ Processando lote ${batchIndex + 1}/${batches.length} (${batch.length} neg√≥cios)`);
      
      await this.processBatch(batch);
      
      // Delay entre lotes (exceto √∫ltimo)
      if (batchIndex < batches.length - 1) {
        await this.sleep(settings.automation.delay_between_batches);
      }
    }
  }
  
  /**
   * Processar lote de neg√≥cios
   */
  async processBatch(batchDeals) {
    for (const deal of batchDeals) {
      const dealStartTime = Date.now();
      
      try {
        await this.processSingleDeal(deal);
        
        const processingTime = Date.now() - dealStartTime;
        this.stats.recordSuccess(deal.ID, processingTime);
        
        this.logger.dealProcessed(deal.ID, null, true, { processingTime });
        
      } catch (error) {
        const processingTime = Date.now() - dealStartTime;
        this.stats.recordFailure(deal.ID, error);
        
        this.logger.dealError(deal.ID, error);
        
        if (!settings.error_handling.continue_on_error) {
          throw error;
        }
      }
      
      // Delay entre neg√≥cios
      await this.sleep(settings.automation.delay_between_deals);
    }
  }
  
  /**
   * Processar um √∫nico neg√≥cio
   */
  async processSingleDeal(deal) {
    this.logger.debug(`üìã Processando neg√≥cio ${deal.ID}: ${deal.TITLE}`);
    
    // 1. Verificar se j√° tem dados PGFN v√°lidos (skip se completo)
    const existingFields = await this.bitrixService.checkExistingPGFNFields(deal.ID);
    if (await this.hasValidPGFNData(existingFields)) {
      this.logger.debug(`‚è≠Ô∏è Neg√≥cio ${deal.ID} j√° possui dados PGFN v√°lidos, ignorando`);
      this.stats.recordSkip(deal.ID, 'valid_existing_data');
      return;
    }
    
    // 2. Buscar CNPJ da empresa ou do pr√≥prio neg√≥cio
    const startCnpjTime = Date.now();
    let cnpj = null;
    
    // Primeiro tenta no campo do pr√≥prio neg√≥cio (se existir)
    if (deal.UF_CRM_1745494235) {
      cnpj = deal.UF_CRM_1745494235;
      this.logger.debug(`üîç CNPJ encontrado no campo do neg√≥cio ${deal.ID}: ${cnpj}`);
    } 
    // Depois tenta na empresa associada
    else if (deal.COMPANY_ID && deal.COMPANY_ID !== '0') {
      cnpj = await this.bitrixService.getCompanyCNPJ(deal.COMPANY_ID);
      this.logger.debug(`üîç CNPJ encontrado na empresa do neg√≥cio ${deal.ID}: ${cnpj}`);
    }
    
    const cnpjTime = Date.now() - startCnpjTime;
    this.stats.addApiTime('bitrix', cnpjTime);
    
    if (!cnpj) {
      this.logger.info(`‚ùå Neg√≥cio ${deal.ID} sem CNPJ v√°lido - ser√° reprocessado no pr√≥ximo ciclo`);
      this.stats.recordSkip(deal.ID, 'no_cnpj');
      return;
    }
    
    this.logger.debug(`üîç CNPJ encontrado para neg√≥cio ${deal.ID}: ${cnpj}`);
    
    // 3. Consultar dados PGFN
    const startPgfntime = Date.now();
    const pgfnData = await this.pgfnService.getPGFNData(cnpj);
    const pgfnTime = Date.now() - startPgfntime;
    this.stats.addApiTime('pgfn', pgfnTime);
    
    // 4. Verificar se tem dados v√°lidos antes de converter
    if (!pgfnData || !pgfnData.dados_receita) {
      this.logger.error(`‚ùå Dados PGFN inv√°lidos para neg√≥cio ${deal.ID}`);
      this.stats.recordSkip(deal.ID, 'invalid_pgfn_data');
      return;
    }
    
    // 5. Converter dados para formato correto do Bitrix (incluindo dados da empresa)
    const bitrixFields = this.convertToBitrixFormat(pgfnData.dados_receita, pgfnData.empresa);
    
    this.logger.debug(`üîß Convertendo dados para formato Bitrix: ${Object.keys(bitrixFields).length} campos`);
    
    // 6. Atualizar campos no Bitrix com formato corrigido
    const startUpdateTime = Date.now();
    const updateSuccess = await this.bitrixService.updateDealFields(deal.ID, bitrixFields);
    const updateTime = Date.now() - startUpdateTime;
    this.stats.addApiTime('bitrix', updateTime);
    
    if (updateSuccess) {
      // Marcar neg√≥cio como processado para n√£o reprocessar
      settings.automation.processed_deals.add(deal.ID.toString());
      
      this.logger.dealProcessed(deal.ID, cnpj, true, {
        fieldsUpdated: Object.keys(bitrixFields).length,
        processingTime: pgfnData.execution_time
      });
    } else {
      throw new Error('Falha ao atualizar campos no Bitrix');
    }
  }
  
  /**
   * Verificar se neg√≥cio j√° tem dados PGFN v√°lidos
   */
  async hasValidPGFNData(existingFields) {
    // Campos essenciais que devem estar preenchidos (TODOS VARI√ÅVEIS!)
    const essentialFields = [
      'UF_CRM_1758806167',    // execucao_fiscal_ativa
      'UF_CRM_1758808716',    // cpf_socio_responde 
      'UF_CRM_1758806267',    // transacao_impugnacao
      'UF_CRM_1758806322',    // parcelamentos_5_anos
      'UF_CRM_1758806337',    // parcelamentos_ativos
      'UF_CRM_1758806357',    // total_parcelado
      'UF_CRM_1758806370',    // total_saldo_devedor
      'UF_CRM_1758806394',    // possui_transacao_beneficio
      'UF_CRM_1557101315015'  // nome_empresa
    ];
    
    // Verificar se todos os campos essenciais est√£o preenchidos
    for (const fieldId of essentialFields) {
      const value = existingFields[fieldId];
      
      // Campos podem estar vazios, null, undefined ou string vazia
      if (!value || value === '' || value === null || value === undefined) {
        return false; // Campo n√£o preenchido
      }
      
      // Para campos booleanos, aceitar diversos formatos v√°lidos
      const booleanFields = ['UF_CRM_1758806167', 'UF_CRM_1758808716', 'UF_CRM_1758806267', 'UF_CRM_1758806394'];
      if (booleanFields.includes(fieldId)) {
        // Aceitar: "SIM", "N√ÉO", "1", "0", valores que indicam que foi processado
        if (!['SIM', 'N√ÉO', '1', '0', 'sim', 'n√£o'].includes(String(value).toUpperCase())) {
          return false; // Valor n√£o reconhecido para campo booleano
        }
      }
    }
    
    return true; // Todos os campos essenciais est√£o preenchidos
  }

  /**
   * Aguardar tempo especificado
   */
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  
  /**
   * Obter estat√≠sticas finais
   */
  getFinalStats() {
    return {
      executionId: this.executionId,
      summary: this.stats.getSummary(),
      simpleSummary: this.stats.getSimpleSummary(),
      isComplete: !this.isRunning
    };
  }
  
  /**
   * Verificar se automa√ß√£o est√° rodando
   */
  isActive() {
    return this.isRunning;
  }
  
  /**
   * Parar automa√ß√£o (se implementado)
   */
  async stop() {
    if (this.isRunning) {
      this.logger.warn('üèÅ Parando automa√ß√£o...');
      this.isRunning = false;
    }
  }
}

module.exports = AutomationEngine;
